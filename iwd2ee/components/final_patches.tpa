COPY_EXISTING_REGEXP ~.*\.itm~ ~override~
	READ_SHORT 0x68 thenumheaders
	PATCH_IF thenumheaders > 0 BEGIN
		READ_BYTE 0x82 thefirstheadertype
		PATCH_IF thefirstheadertype = 1 OR thefirstheadertype = 2 BEGIN
			LPF ADD_ITEM_EFFECT INT_VAR type=1 opcode=500 target=2 timing=0 special=1 STR_VAR resource=~MEONHIT~ END
			LPF ADD_ITEM_EFFECT INT_VAR type=2 opcode=500 target=2 timing=0 special=2 STR_VAR resource=~MEONHIT~ END
		END
	END
	UNLESS ~MEONHIT~
	BUT_ONLY_IF_IT_CHANGES

COPY_EXISTING_REGEXP ~00FIST\.itm~ ~override~ ~00MFIST.*\.itm~ ~override~ ~CHILLT\.itm~ ~override~ ~DESTRUC\.itm~ ~override~ ~GTOUCH\.itm~ ~override~ ~HARM\.itm~ ~override~ ~ICW[0-9][0-9]\.itm~ ~override~ ~ILW[0-9][0-9]\.itm~ ~override~ ~IMW[0-9][0-9]\.itm~ ~override~ ~ISW[0-9][0-9]\.itm~ ~override~ ~LTOUCH\.itm~ ~override~ ~SHOCKG[0-9][0-9]\.itm~ ~override~ ~SLIVING\.itm~ ~override~ ~SNAKEBI\.itm~ ~override~
	READ_SHORT 0x68 thenumheaders
	PATCH_IF thenumheaders > 0 BEGIN
		READ_BYTE 0x82 thefirstheadertype
		PATCH_IF thefirstheadertype = 1 BEGIN
			LPF ADD_ITEM_EFFECT INT_VAR type=1 opcode=500 target=2 timing=0 parameter2=2001 special=1 STR_VAR resource=~MEEXHIT~ END
		END
	END
	IF_EXISTS
	UNLESS ~MEEXHIT~
	BUT_ONLY_IF_IT_CHANGES

COPY_EXISTING_REGEXP ~.*\.itm~ ~override~
	READ_SHORT 0x68 thenumheaders
	PATCH_IF thenumheaders > 0 BEGIN
		READ_SHORT 0x1C theitemtype
		READ_ASCII 0x22 theappearance (2)
		offset = 0x82
		FOR (i = 0; i < thenumheaders; ++i) BEGIN
			READ_BYTE offset theheadertype
			READ_SHORT (offset + 0x18) thedicenumber
			READ_SHORT (offset + 0x1C) thedamagetype
			PATCH_IF thedamagetype = 1 OR thedamagetype = 4 BEGIN
				damageeffecttype = 0x100000
			END ELSE PATCH_IF thedamagetype = 2 OR thedamagetype = 9 BEGIN
				damageeffecttype = 0
			END ELSE BEGIN
				damageeffecttype = 0x1000000
			END
			newdamage = 0
			PATCH_IF theitemtype = 16 AND theheadertype = 1 AND (~%theappearance%~ STRING_EQUAL_CASE ~DD~ OR ~%theappearance%~ STRING_EQUAL_CASE ~SS~) BEGIN
				newdamage = 0x20600
			END ELSE PATCH_IF theitemtype = 0 OR theitemtype = 16 OR theitemtype = 19 OR theitemtype = 24 OR theitemtype = 28 OR theitemtype = 44 BEGIN
				newdamage = 0x10600
			END
			PATCH_IF theheadertype = 1 AND thedicenumber > 0 BEGIN
				LPF ADD_ITEM_EFFECT INT_VAR header=(i + 1) type=1 opcode=500 target=2 timing=0 parameter1=newdamage parameter2=damageeffecttype savingthrow=0x1884000 STR_VAR resource=~EXDAMAGE~ END
			END ELSE PATCH_IF theheadertype = 2 AND thedicenumber > 0 BEGIN
				LPF ADD_ITEM_EFFECT INT_VAR header=(i + 1) type=2 opcode=500 target=2 timing=0 parameter1=newdamage parameter2=damageeffecttype savingthrow=0x1884000 STR_VAR resource=~EXDAMAGE~ END
			END
			offset += 0x38
		END
	END
	READ_LONG 0x18 theitemflags
	PATCH_IF (theitemflags BAND 0x00040000) = 0 BEGIN
		READ_LONG 0x64 headeroffset
		READ_SHORT 0x68 numheaders
		PATCH_IF numheaders > 0 BEGIN
			READ_LONG 0x6A effectoffset
			READ_SHORT (headeroffset + 0x38 * (numheaders - 1) + 0x1E) lastheadernumeffects
			READ_SHORT (headeroffset + 0x38 * (numheaders - 1) + 0x20) lastheaderfirsteffectindex
			numeffects = lastheadernumeffects + lastheaderfirsteffectindex
			offset = effectoffset
			FOR (i = 0; i < numeffects; ++i) BEGIN
				READ_SHORT offset theopcode
				READ_LONG (offset + 0x8) theparameter2
				READ_BYTE (offset + 0xC) thetiming
				PATCH_IF (theopcode = 12 OR (theopcode = 241 AND theparameter2 = 0)) AND thetiming != 3 AND thetiming != 4 BEGIN
//				PATCH_IF (theopcode = 241 AND theparameter2 = 0) AND thetiming != 3 AND thetiming != 4 BEGIN
					READ_BYTE (offset + 0x4) theparameter1
					READ_SBYTE (offset + 0x1C) thedicenumber
					PATCH_IF thedicenumber < 0 BEGIN
						thedicenumber = 0
					END
					READ_SBYTE (offset + 0x20) thedicesize
					PATCH_IF thedicesize < 0 BEGIN
						thedicesize = 0
					END
					READ_LONG (offset + 0x24) thesavingthrow
					thesavingthrow|=0x10000
					PATCH_IF theopcode = 241 BEGIN
						thesavingthrow|=0x200000
						WRITE_LONG (offset + 0x8) 0x400000
					END
					PATCH_IF (thesavingthrow BAND 0x00000004) > 0 BEGIN
						thesavingthrow&=0xFFFFFFFB
						thesavingthrow|=0x400
					END
					PATCH_IF (thesavingthrow BAND 0x00000008) > 0 BEGIN
						thesavingthrow&=0xFFFFFFF7
						thesavingthrow|=0x800
					END
					PATCH_IF (thesavingthrow BAND 0x00000010) > 0 BEGIN
						thesavingthrow&=0xFFFFFFEF
						thesavingthrow|=0x1000
					END
					WRITE_SHORT offset 500
					WRITE_LONG (offset + 0x4) (theparameter1 + (thedicesize << 8) + (thedicenumber << 16))
					WRITE_BYTE (offset + 0xC) 0
					WRITE_LONG (offset + 0xE) 0
					WRITE_ASCII (offset + 0x14) ~EXDAMAGE~ #8
					WRITE_LONG (offset + 0x1C) 0
					WRITE_LONG (offset + 0x20) 0
					WRITE_LONG (offset + 0x24) thesavingthrow
				END
				offset = offset + 0x30
			END
		END
	END
	UNLESS ~EXDAMAGE~
	BUT_ONLY_IF_IT_CHANGES

COPY_EXISTING_REGEXP ~..BOWS..\.itm~ ~override~ ~..BOWP..\.itm~ ~override~ ~..BWLX..\.itm~ ~override~ ~..HFBS..\.itm~ ~override~ ~..HFBP..\.itm~ ~override~ ~..HFLX..\.itm~ ~override~
	READ_SHORT 0x68 thenumheaders
	READ_SHORT 0x1C theitemtype
	PATCH_IF thenumheaders > 0 AND (theitemtype = 15 OR theitemtype = 27) BEGIN
		LPF ADD_ITEM_EQEFFECT INT_VAR opcode=288 target=1 timing=2 parameter1=1 parameter2=192 STR_VAR resource=~USSNEAKX~ END
	END
	IF_EXISTS
	UNLESS ~USSNEAKX~
	BUT_ONLY_IF_IT_CHANGES

COPY_EXISTING_REGEXP ~.*\.itm~ ~override~
	ismelee = 0
	isranged = 0
	islauncher = 0
	READ_SHORT 0x18 theitemflags
	READ_SHORT 0x1C thecategory
	READ_ASCII 0x22 theappearance (2)
	PATCH_IF (~%theappearance%~ STRING_EQUAL_CASE ~2A~) OR (~%theappearance%~ STRING_EQUAL_CASE ~3A~) OR (~%theappearance%~ STRING_EQUAL_CASE ~4A~) BEGIN
		LPF ADD_ITEM_EQEFFECT INT_VAR opcode=288 target=1 timing=2 parameter1=thecategory parameter2=241 savingthrow=(theitemflags << 16) special=1 STR_VAR resource=~USEQTYPE~ END
	END ELSE PATCH_IF thecategory = 67 BEGIN
		LPF ADD_ITEM_EQEFFECT INT_VAR opcode=288 target=1 timing=2 parameter1=thecategory parameter2=241 savingthrow=(theitemflags << 16) special=2 STR_VAR resource=~USEQTYPE~ END
	END ELSE PATCH_IF (~%theappearance%~ STRING_EQUAL_CASE ~D1~) OR (~%theappearance%~ STRING_EQUAL_CASE ~D2~) OR (~%theappearance%~ STRING_EQUAL_CASE ~D3~) OR (~%theappearance%~ STRING_EQUAL_CASE ~D4~) BEGIN
		LPF ADD_ITEM_EQEFFECT INT_VAR opcode=288 target=1 timing=2 parameter1=thecategory parameter2=241 savingthrow=(theitemflags << 16) special=3 STR_VAR resource=~USEQTYPE~ END
	END ELSE BEGIN
		READ_SHORT 0x68 thenumheaders
		PATCH_IF thenumheaders > 0 BEGIN
			offset = 0x82
			FOR (i = 0; i < thenumheaders; ++i) BEGIN
				READ_BYTE offset theheadertype
				PATCH_IF theheadertype = 1 AND isranged = 0 BEGIN
					ismelee = 1
					READ_SHORT (offset + 0x18) thedicenumber
					READ_SHORT (offset + 0x1C) thedamagetype
					PATCH_IF thedicenumber = 0 BEGIN
						thedamagetype = 0
					END
				END ELSE PATCH_IF theheadertype = 2 BEGIN
					isranged = 1
					READ_SHORT (offset + 0x18) thedicenumber
					READ_SHORT (offset + 0x1C) thedamagetype
					PATCH_IF thedicenumber = 0 BEGIN
						thedamagetype = 0
					END
				END ELSE PATCH_IF theheadertype = 4 BEGIN
					islauncher = 1
					READ_SHORT (offset + 0x18) thedicenumber
					READ_SHORT (offset + 0x1C) thedamagetype
					PATCH_IF thedicenumber = 0 BEGIN
						thedamagetype = 0
					END
				END
				offset += 0x38
			END
			PATCH_IF isranged = 1 BEGIN
				LPF ADD_ITEM_EQEFFECT INT_VAR opcode=288 target=1 timing=2 parameter1=thecategory parameter2=241 savingthrow=(theitemflags << 16) special=(4 + (thedamagetype << 24)) STR_VAR resource=~USEQTYPE~ END
			END ELSE PATCH_IF ismelee = 1 BEGIN
				PATCH_IF (~%theappearance%~ STRING_EQUAL_CASE ~  ~) BEGIN
					LPF ADD_ITEM_EQEFFECT INT_VAR opcode=288 target=1 timing=2 parameter1=thecategory parameter2=241 savingthrow=(theitemflags << 16) special=(6 + (thedamagetype << 24)) STR_VAR resource=~USEQTYPE~ END
				END ELSE BEGIN
					LPF ADD_ITEM_EQEFFECT INT_VAR opcode=288 target=1 timing=2 parameter1=thecategory parameter2=241 savingthrow=(theitemflags << 16) special=(5 + (thedamagetype << 24)) STR_VAR resource=~USEQTYPE~ END
				END
			END ELSE PATCH_IF islauncher = 1 BEGIN
				LPF ADD_ITEM_EQEFFECT INT_VAR opcode=288 target=1 timing=2 parameter1=thecategory parameter2=241 savingthrow=(theitemflags << 16) special=(7 + (thedamagetype << 24)) STR_VAR resource=~USEQTYPE~ END
			END
		END
	END
	UNLESS ~USEQTYPE~
	BUT_ONLY_IF_IT_CHANGES

COPY_EXISTING_REGEXP ~.*\.itm~ ~override~
	isweapon = 0
	READ_SHORT 0x68 thenumheaders
	PATCH_IF thenumheaders > 0 BEGIN
		offset = 0x82
		FOR (i = 0; i < thenumheaders; ++i) BEGIN
			READ_BYTE offset theheadertype
			PATCH_IF theheadertype = 1 OR theheadertype = 2 BEGIN
				isweapon = 1
			END
			offset += 0x38
		END
		PATCH_IF isweapon = 1 BEGIN
			LPF ADD_ITEM_EQEFFECT INT_VAR opcode=434 target=1 timing=2 parameter1=1 STR_VAR resource=~USREPERM~ END
		END
	END
	UNLESS ~USREPERM~
	BUT_ONLY_IF_IT_CHANGES

COPY_EXISTING_REGEXP ~.*\.itm~ ~override~
	isweapon = 0
	READ_SHORT 0x68 thenumheaders
	PATCH_IF thenumheaders > 0 BEGIN
		offset = 0x82
		FOR (i = 0; i < thenumheaders; ++i) BEGIN
			READ_BYTE offset theheadertype
			PATCH_IF theheadertype = 1 OR theheadertype = 2 BEGIN
				isweapon = 1
			END
			offset += 0x38
		END
		PATCH_IF isweapon = 1 BEGIN
			LPF ADD_ITEM_EQEFFECT INT_VAR opcode=287 target=1 timing=2 STR_VAR resource=~USNONSNA~ END
		END
	END
	UNLESS ~USNONSNA~
	BUT_ONLY_IF_IT_CHANGES

COPY_EXISTING_REGEXP ~.*\.cre~ ~override~
	WRITE_SHORT 0x184 0
	WRITE_SHORT 0x186 0
	WRITE_SHORT 0x188 (0 - 2)
	WRITE_SHORT 0x1A4 0
	BUT_ONLY_IF_IT_CHANGES

COPY_EXISTING_REGEXP ~.*\.cre~ ~override~
	READ_LONG animation theanimation
	PATCH_IF theanimation = 61296 AND NOT (~%SOURCE_RES%~ STRING_EQUAL_CASE ~USERUPTC~) BEGIN
		WRITE_LONG animation 61280
	END
	BUT_ONLY_IF_IT_CHANGES